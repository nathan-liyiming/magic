{
  "name": "Magic",
  "tagline": "Yiming Li",
  "body": "### Working Experience\r\n   * __Software Development Engineer__ - Microsoft (June 2015 - Present): [3D Printing](http://www.microsoft.com/3d) in the Operating System Group, implement 3D Printing driver, 3D memory model [API](https://msdn.microsoft.com/library/windows/apps/windows.graphics.printing3d.aspx), [Unity app for 3D printing](https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/3DPrintingFromUnity) running in Hololens and online [3DTools](tools3d.azurewebsites.net) website.\r\n\r\n   * __Software Development Engineer Intern__ - Microsoft (June, 2014 - August 2014): [3D Printing](http://www.microsoft.com/3d) in the Operating System Group, extend [Marlin](https://github.com/MarlinFirmware/Marlin) Firmware (Open source), modify driver and add interface and also embed [MSO descriptor](https://msdn.microsoft.com/library/windows/hardware/dn705228(v=vs.85).aspx) into device, which defines the Compatible ID ''3DPRRINT''.\r\n\r\n### Background and Education\r\n   * __ScM Computer Science__ at Brown University (August 2013 - May 2015) _GPA: 4.0_\r\n   * __BSc Artificial Intelligence__ at University of Liverpool (September 2011 - June 2013) _GPA: 3.98_\r\n   * __BSc Aritificial Intelligence__ at Xi'an Jiaotong-Liverpool University (September 2009 - June 2011)\r\n\r\n### Top Projects\r\n   * __PuddleStore based on [Raft](https://raft.github.io/) and Tapestry (Golang)__: Modest version of OceanStore, providing a consistent, highly-available, in-memory storage and fault tolerance utility atop an infrastructure comprised of servers. This distributed file system is implemented based on Golang RPC. Design and implement the standard interface and data block in the file system to allow replication of data, copy-on-write update, file locking and log compression (snapshot).\r\n\r\n   * __TCP over IP over UDP (Scala)__: One monitor, two men(Dev and QA by turns), seven weeks for peer coding, more than 70 scala files, more than 100 commits in github, more than 4400 lines code, sending 5GB data reliably in 11MB/s (Effective Bandwidth). We have own TCP (state machine, flow control, congestion control, [de]multiplex and general socket API) over own IP over UDP in Scala. Check the [source code](https://github.com/0xdyu/TCP-IP) and also the awesome [document](https://github.com/0xdyu/TCP-IP/blob/master/tcp-ip.pdf).\r\n\r\n   * __Weenix (operating system based on Unix)__: Based on C language running under qemu, implemented Threads and Processes, Scheduling and Context Switching, Drivers (TTY, Disks, Memory devices), Virtual File System (VFS), System 5 File System (S5FS), Virtual Memory (VM, Anonymous Objects, Shadow Objects, mmap, munmap, fork, handle page fault). Test and pass more than 2000 userland test cases. Learn to use debug tool (GDB) under both kernel and userland model. You can use the oldest text editor [ed] to write C language, then run in my Weenix. Check the [wiki](http://weenix.cs.brown.edu/mediawiki/index.php/Weenix) page.\r\n\r\n### Publications\r\n[Simon: ''ScriptableInteractive Monitoring for SDNs''](http://dl.acm.org/citation.cfm?id=2774994), Tim Nelson, Da Yu,Yiming  Li, Rodrigo Fonseca, Shriram Krishnamurthi, Symposium on SDN Research (SOSR) 2015. Also check my [thesis](https://pdfs.semanticscholar.org/5660/759d91fb8d570aeed2505ee5f5142fa652c5.pdf).\r\n\r\n### Ping Me\r\nCheck out my [LinkedIn](http://www.linkedin.com/in/yiminglics) or [Facebook](https://www.facebook.com/nathan.liyiming)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}